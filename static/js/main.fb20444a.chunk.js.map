{"version":3,"sources":["fbase.js","components/Nweet.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/NweetFactory.js","routes/Home.js","components/Navi.js","components/router.js","components/App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Nweet","nweet","isOwner","useState","editing","setEditing","text","newNweet","setNewNweet","onDelete","a","window","confirm","doc","id","delete","nImgUrl","refFromURL","editToggle","prev","onSubmit","e","console","log","preventDefault","update","className","type","placeholder","value","autoFocus","onChange","target","required","onClick","src","alt","icon","faTrash","faPencilAlt","Profile","user","refreshUser","dbSensor","history","useHistory","displayName","editText","setEditTxt","nweets","setNweets","loading","setLoading","useEffect","getMyNweets","collection","where","uid","orderBy","get","data","mine","docs","map","updateProfile","style","marginTop","user_id","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","catch","message","signInWithEmailAndPassword","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faTwitter","color","size","marginBottom","faGoogle","faGithub","NweetFactory","setNweet","nImg","setNImg","alert","nImgRef","ref","child","uuidv4","putString","res","getDownloadURL","nweetObj","created_at","Date","now","add","maxLength","htmlFor","faPlus","accept","file","theFile","files","reader","FileReader","onload","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","getNweets","dbnweets","obj","forEach","newNweetObj","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","func","onSnapshot","snap","nweetArr","Navi","maxWidth","width","margin","exact","path","from","App","init","setInit","userObj","setUserObj","isUser","onAuthStateChanged","args","currentUser","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb20444a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweet, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweet.text);\n\n  // 삭제\n  const onDelete = async () => {\n    const ok = window.confirm(\"진짜 삭제할라고?\");\n    if (ok) {\n      await dbService.doc(`nweet/${nweet.id}`).delete(); // id가지고 게시물 삭제\n\n      nweet.nImgUrl !== \"\" &&\n        (await storageService.refFromURL(nweet.nImgUrl).delete()); // 게시물의 사진 삭제\n    } else {\n      return;\n    }\n  };\n\n  // 수정 토글\n  const editToggle = () => {\n    setEditing((prev) => !prev);\n  };\n  // 수정 완료\n  const onSubmit = async (e) => {\n    console.log(\"dd\");\n    e.preventDefault();\n    await dbService.doc(`nweet/${nweet.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n\n  // 수정 텍스트\n  const onChange = (text) => {\n    const {\n      target: { value },\n    } = text;\n\n    setNewNweet(value);\n  };\n\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          {isOwner && (\n            <>\n              <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                <input\n                  type=\"text\"\n                  placeholder=\"수정해주세요\"\n                  value={newNweet}\n                  autoFocus\n                  onChange={onChange}\n                  className=\"formInput\"\n                  required\n                />\n                <input type=\"submit\" value=\"수정\" className=\"formBtn\" />\n              </form>\n              <button onClick={editToggle} className=\"formBtn cancelBtn\">\n                Cancel\n              </button>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <h4>{nweet.text}</h4>\n          {nweet.nImgUrl && <img src={nweet.nImgUrl} alt=\"뉴윗 이미지\" />}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDelete}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={editToggle}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\nexport default Nweet;\n","import Nweet from \"components/Nweet\";\nimport { authService, dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ user, refreshUser, dbSensor }) => {\n  let history = useHistory(); // history\n\n  const [editText, setEditTxt] = useState(user.displayName);\n  const [nweets, setNweets] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loading && getMyNweets();\n    dbSensor(setNweets);\n\n    return () => setLoading(false);\n  }, [loading, dbSensor]);\n  // 내꺼 뉴윗만 가져오기\n\n  const getMyNweets = async () => {\n    const data = await dbService\n      .collection(\"nweet\")\n      .where(\"user_id\", \"==\", user.uid) // 조건부 get\n      .orderBy(\"created_at\", \"asc\") // 정렬도 가능, asc랑desc 따로 인덱싱 작업해줘야함 => 파이어베이스가 해줌 시간은좀 걸림ㅋㅋ\n      .get();\n    const mine = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n    setNweets(mine);\n  };\n  //로그아웃\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n  // 텍스트함수\n  const onChange = (text) => {\n    const {\n      target: { value },\n    } = text;\n    setEditTxt(value);\n  };\n  //수정 완료\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (user.displayName !== editText) {\n      await user.updateProfile({\n        displayName: editText,\n      });\n    }\n    refreshUser();\n  };\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          autoFocus\n          value={editText}\n          type=\"text\"\n          placeholder=\"변경할 닉네임을 입력해주세요\"\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"확인\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      {nweets.map((nweet) => {\n        return (\n          <Nweet\n            key={nweet.id}\n            nweet={nweet}\n            isOwner={nweet.user_id === user.uid}\n          />\n        );\n      })}\n      <button className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        로그아웃\n      </button>\n    </div>\n  );\n};\nexport default Profile;\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  // 아이디, 비번 입력\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else {\n      setPassword(value);\n    }\n  };\n\n  // 엔터\n  const onSubmit = async (e) => {\n    console.log(\"dd\");\n    e.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService\n          .createUserWithEmailAndPassword(email, password)\n          .catch(function (error) {\n            setError(error.message);\n          }); // 회원가입하면 자동으로 로그인됨\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // 로그인, 회원가입 변경\n  const toggleAccount = () => {\n    setNewAccount((prev) => !prev);\n  };\n\n  return (\n    <>\n      <form onSubmit={(e) => onSubmit(e)} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email || \"\"}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password || \"\"}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          className=\"authInput authSubmit\"\n          type=\"submit\"\n          value={newAccount ? \"회원가입\" : \"로그인\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <button\n        type=\"text\"\n        onClick={() => toggleAccount()}\n        className=\"authSwitch\"\n      >\n        {newAccount ? \"로그인하기\" : \"회원가입하기\"}\n      </button>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  // 소셜로그인\n  const onSocialClick = (e) => {\n    const {\n      target: { name },\n    } = e;\n\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = authService.signInWithPopup(provider);\n    console.log(data);\n  };\n\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          구글로 로그인 <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          깃허브로 로그인 <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NweetFactory = ({ user }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [nImg, setNImg] = useState(\"\");\n  // 글쓰기 버튼\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (nweet === \"\") {\n      alert(\"내용을 입력해 주세요\");\n      return;\n    }\n    let nImgUrl = \"\";\n    if (nImg !== \"\") {\n      const nImgRef = storageService.ref().child(`${user.uid}/${uuidv4()}`); //이미지 경로 및 이름 지정 => user.id가 경로, uuid가 이름\n      const res = await nImgRef.putString(nImg, \"data_url\");\n      nImgUrl = await res.ref.getDownloadURL();\n    }\n    const nweetObj = {\n      text: nweet,\n      created_at: Date.now(),\n      user_id: user.uid,\n      nImgUrl,\n    };\n    await dbService.collection(\"nweet\").add(nweetObj);\n    setNweet(\"\");\n    setNImg(\"\");\n  };\n  // text input\n  const onChange = (text) => {\n    const {\n      target: { value },\n    } = text;\n    setNweet(value);\n  };\n  // 이미지 업로드\n  const onFileChange = (file) => {\n    const {\n      target: { files },\n    } = file;\n    const theFile = files[0];\n    const reader = new FileReader();\n\n    reader.onload = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setNImg(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  // 이미지 업로드 취소\n  const cencleImg = () => {\n    setNImg(\"\");\n  };\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={nweet || \"\"}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"무슨생각해?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>사진 올리기</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n\n      {nImg && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={nImg}\n            style={{\n              backgroundImage: nImg,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={cencleImg}>\n            <span>취소</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default NweetFactory;\n","import Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Home = ({ user, dbSensor }) => {\n  const [nweets, setNweets] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loading && getNweets();\n    dbSensor(setNweets);\n\n    return () => setLoading(false);\n  }, [loading, dbSensor]);\n\n  // 뉴윗 가져오기\n  const getNweets = async () => {\n    const dbnweets = await dbService.collection(\"nweet\").get();\n    // 데이터에 접근할땐 이렇게\n    // https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#get\n    let obj = [];\n    dbnweets.forEach((doc) => {\n      const newNweetObj = {\n        ...doc.data(),\n        id: doc.id,\n      };\n      obj.push(newNweetObj);\n    });\n    setNweets(obj);\n  };\n\n  return (\n    <div className=\"container\">\n      {/* 뉴윗 생성 */}\n      <NweetFactory user={user} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet) => {\n          return (\n            <Nweet\n              key={nweet.id}\n              nweet={nweet}\n              isOwner={nweet.user_id === user.uid}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ user }) => {\n  return (\n    <nav>\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n          <Link to=\"/\" style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/profile\"\n            style={{\n              marginLeft: 10,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              fontSize: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n            <span style={{ marginTop: 10 }}>\n              {user.displayName ? `${user.displayName}의 Profile` : \"Profile\"}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\nexport default Navigation;\n","import { dbService } from \"fbase\";\nimport React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Profile from \"routes/Profile\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"./Navi\";\n\nconst AppRouter = ({ isLoggedIn, user, refreshUser }) => {\n  // 디비 변화 감지\n  const dbSensor = (func) => {\n    dbService.collection(\"nweet\").onSnapshot((snap) => {\n      const nweetArr = snap.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      func(nweetArr);\n    });\n  };\n  return (\n    <Router>\n      {isLoggedIn && <Navigation user={user} />}\n      <Switch>\n        <>\n          {isLoggedIn ? (\n            <div\n              style={{\n                maxWidth: 890,\n                width: \"100%\",\n                margin: \"0 auto\",\n                marginTop: 80,\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Route exact path=\"/\">\n                <Home dbSensor={dbSensor} user={user} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile\n                  dbSensor={dbSensor}\n                  refreshUser={refreshUser}\n                  user={user}\n                />\n              </Route>\n            </div>\n          ) : (\n            <>\n              <Route exact path=\"/\">\n                <Auth />\n              </Route>\n              <Redirect from=\"*\" to=\"/\" />\n              {/* / 외에 다른데로 갔을때 무적권 /로 보냄 */}\n            </>\n          )}\n        </>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false); // 파이어베이스 초기회 여부\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    isUser();\n  }, []);\n\n  // 유저 여부\n  const isUser = () => {\n    // 유저의 인증 상태가 바뀌면 실행됨\n    authService.onAuthStateChanged((user) => {\n      // 그냥 user 넣어도 되는데 크기가 존나커서 업데이트할때 애가 정신못차려서 덩지 줄여줌\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  };\n\n  // 유저 업데이트 => 업데이트하자마자 Navi도 실시간으로 업데이트하고싶어서 이거해줌\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          user={userObj}\n        />\n      ) : (\n        \"초기화중\"\n      )}\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}